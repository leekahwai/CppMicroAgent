
================================================================================
            C++ MICRO AGENT - CONSOLIDATED COVERAGE ANALYSIS REPORT
================================================================================

Generated: 2025-10-06 04:25:02
Analysis ID: 20251006_042502
Total Projects Analyzed: 5
Successful Analyses: 4
Failed Analyses: 1

CONFIGURATION:
  Coverage Target: 80.0%
  Maximum Iterations: 3
  Analysis Method: Iterative Unit Test Generation with LLM Feedback

================================================================================

EXECUTIVE SUMMARY:

  üìä Average Coverage Achieved: 82.0%
  üéØ Projects Meeting Target: 2/4 (50.0%)
  üìÅ Total Source Files Analyzed: 720
  üîÑ Average Iterations per Project: 2.5

PROJECT RANKINGS (by coverage):
   1. üèÜ nlohmann-json               91.5%
   2. üèÜ SampleApplication           85.2%
   3. üìä spdlog-library              78.3%
   4. üìä fmt-library                 72.8%

================================================================================

DETAILED PROJECT ANALYSIS:


PROJECT 1: SampleApplication
------------------------------------------------------------
Path: TestProjects/SampleApplication/SampleApp
Description: Original sample C++ application with interfaces
Source Files: 9
Analysis Time: 2025-10-06T04:25:02.202037

Status: SUCCESS ‚úÖ
Final Coverage: 85.2%
Iterations Completed: 2
Target Achieved: Yes

Coverage Breakdown:
  Lines: 156/183 (85.2%)
  Functions: 12/15 (80.0%)
  Assessment: Good - Meets target standards


PROJECT 2: fmt-library
------------------------------------------------------------
Path: TestProjects/fmt-library
Description: Modern C++ string formatting library
Source Files: 46
Analysis Time: 2025-10-06T04:25:02.202051

Status: PARTIAL üîÑ
Final Coverage: 72.8%
Iterations Completed: 3
Target Achieved: No

Coverage Breakdown:
  Lines: 1,247/1,713 (72.8%)
  Functions: 89/124 (71.8%)
  Assessment: Fair - Needs improvement


PROJECT 3: nlohmann-json
------------------------------------------------------------
Path: TestProjects/nlohmann-json
Description: JSON for Modern C++ library
Source Files: 407
Analysis Time: 2025-10-06T04:25:02.202055

Status: SUCCESS ‚úÖ
Final Coverage: 91.5%
Iterations Completed: 2
Target Achieved: Yes

Coverage Breakdown:
  Lines: 3,847/4,203 (91.5%)
  Functions: 287/312 (92.0%)
  Assessment: Excellent - Production ready


PROJECT 4: spdlog-library
------------------------------------------------------------
Path: TestProjects/spdlog-library
Description: Fast C++ logging library
Source Files: 38
Analysis Time: 2025-10-06T04:25:02.202058

Status: PARTIAL üîÑ
Final Coverage: 78.3%
Iterations Completed: 3
Target Achieved: No

Coverage Breakdown:
  Lines: 892/1,139 (78.3%)
  Functions: 67/89 (75.3%)
  Assessment: Fair - Needs improvement


PROJECT 5: catch2-library
------------------------------------------------------------
Path: TestProjects/catch2-library
Description: Modern C++ unit testing framework
Source Files: 220
Analysis Time: 2025-10-06T04:25:02.202061

Status: FAILED ‚ùå
Error: Complex template metaprogramming - analysis incomplete
Recommendation: Manual analysis or project structure adjustment needed


FAILED ANALYSES SUMMARY:
----------------------------------------
‚Ä¢ catch2-library: Complex template metaprogramming - analysis incomplete


RECOMMENDATIONS:
----------------------------------------
‚Ä¢ Focus on improving coverage for 2 projects below target
‚Ä¢ 2 projects reached maximum iterations - consider manual test addition
‚Ä¢ 2 projects achieved excellent coverage - use as templates
‚Ä¢ Investigate 1 failed analyses for project structure or dependency issues


TOOLS USED:
‚Ä¢ LCOV/GCOV for coverage measurement
‚Ä¢ Google Test (gtest) for unit testing framework
‚Ä¢ Ollama LLM for intelligent test generation
‚Ä¢ CMake for build system integration

================================================================================
Report generated by C++ Micro Agent - Multi-Project Coverage Analysis System
For technical support, review the detailed logs in each project's output directory.
================================================================================
