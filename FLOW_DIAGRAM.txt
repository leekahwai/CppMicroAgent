================================================================================
                    NEW PER-FUNCTION COVERAGE FLOW
================================================================================

MAIN STATE MACHINE:
═══════════════════

    ┌──────────────┐
    │  StateInit   │  Initialize system, prepare output directory
    └──────┬───────┘
           │
           ▼
    ┌──────────────────┐
    │ StateParseCMake  │  Parse CMakeLists.txt, extract sources & includes
    └──────┬───────────┘
           │
           ▼
    ┌───────────────────────────┐
    │ StateIterateSourceFiles   │  For each source file found...
    └───────────┬───────────────┘
                │
                │  FOR EACH SOURCE FILE (e.g., Program.cpp)
                │
                ▼
        ╔═══════════════════════════════════════════════════╗
        ║  EXTRACT ALL FUNCTIONS FROM SOURCE FILE           ║
        ╚═══════════════════════════════════════════════════╝
                │
                │  FOR EACH FUNCTION (e.g., Program(), DoSomething())
                │
                ▼
        ┌──────────────────────────────────────────────────┐
        │  CREATE DIRECTORY: output/UnitTestCoverage/      │
        │    Program.cpp/Program/                          │
        └──────────────────────────────────────────────────┘
                │
                │  ╔════════════════════════════════════════╗
                └─>║  FUNCTION-LEVEL STATE MACHINE          ║
                   ║  (Runs for THIS specific function)    ║
                   ╚════════════════════════════════════════╝
                                    │
                                    │ (See detailed flow below)
                                    │
                                    ▼
                   ╔════════════════════════════════════════╗
                   ║  Function processing complete          ║
                   ║  Coverage saved to function directory  ║
                   ╚════════════════════════════════════════╝
                │
                │  REPEAT FOR ALL FUNCTIONS IN ALL SOURCE FILES
                │
                ▼
    ┌─────────────────────────────────┐
    │ StateAggregateCoverageReports   │  Collect all function coverage,
    │                                 │  generate FINAL_COVERAGE_REPORT.txt
    └──────┬──────────────────────────┘
           │
           ▼
    ┌──────────────┐
    │   StateEnd   │  Cleanup and finish
    └──────────────┘


FUNCTION-LEVEL STATE MACHINE (Detailed):
════════════════════════════════════════

For a specific function: Program::Program()
In directory: output/UnitTestCoverage/Program.cpp/Program/

    ┌─────────────────────┐
    │  StatesCreateMock   │  Generate mock headers for dependencies
    │                     │  Output: MockHeader1.h, MockHeader2.h
    └──────┬──────────────┘
           │
           │ SUCCESS: Mocks generated
           ▼
    ┌──────────────────────────────┐
    │  StateGenerateFunctionTest   │  Use LLM to generate test
    │                              │  Input: Function impl, headers, mocks
    │                              │  Output: test_Program.cpp
    └──────┬───────────────────────┘
           │
           │ SUCCESS: Test code generated
           ▼
    ┌────────────────────────────────────────────────────────┐
    │  StateCompileFunctionTest                              │
    │                                                        │
    │  Attempt 1: Compile test with g++ --coverage           │
    │             test_Program.cpp + Program.cpp             │
    │             -lgtest -lgtest_main                       │
    │                                                        │
    │  ┌─────────────────────────────────────────┐          │
    │  │ Compilation FAILED?                     │          │
    │  │  ├─> Capture error output               │          │
    │  │  ├─> Send to LLM with correction prompt │          │
    │  │  ├─> LLM generates fixed test           │          │
    │  │  └─> Retry compilation (up to 3 times)  │          │
    │  └─────────────────────────────────────────┘          │
    │                                                        │
    │  Output: build/test_executable (if successful)        │
    └──────┬─────────────────────────────────────────────────┘
           │
           │ SUCCESS: Test compiled
           ▼
    ┌────────────────────────────────────────────┐
    │  StateMeasureFunctionCoverage              │
    │                                            │
    │  Step 1: Run test executable               │
    │          ./build/test_executable           │
    │          (Generates .gcda coverage files)  │
    │                                            │
    │  Step 2: Run gcov for analysis             │
    │          gcov -b -c *.gcda                 │
    │          (Generates .gcov files)           │
    │                                            │
    │  Step 3: Generate HTML report              │
    │          lcov --capture                    │
    │          genhtml → coverage_html/          │
    │                                            │
    │  Step 4: Save coverage summary             │
    │          coverage_summary.txt              │
    │          - Coverage: 85.5%                 │
    │          - Lines: 34/40                    │
    │                                            │
    └──────┬─────────────────────────────────────┘
           │
           │ SUCCESS: Coverage measured and saved
           ▼
    ┌─────────────┐
    │  StateEnd   │  Function processing complete
    └─────────────┘
           │
           │ Return to main state machine
           ▼
    [Process next function...]


AGGREGATION PHASE:
═══════════════════

StateAggregateCoverageReports walks through all function directories:

    output/UnitTestCoverage/
    ├── Program.cpp/
    │   ├── Program/coverage_summary.txt          ──┐
    │   └── DoSomething/coverage_summary.txt      ──┤
    ├── Helper.cpp/                                 │
    │   ├── HelperFunc/coverage_summary.txt       ──┤
    │   └── AnotherFunc/coverage_summary.txt      ──┤
    └── ...                                          │
                                                     │
                                    READ ALL ────────┘
                                         │
                                         ▼
                            ┌────────────────────────────┐
                            │  Calculate Overall Stats:  │
                            │  - Total coverage: 78.2%   │
                            │  - Lines: 234/300          │
                            │  - Functions: 8            │
                            └────────────────────────────┘
                                         │
                                         ▼
                            ┌────────────────────────────┐
                            │  Generate Final Report:    │
                            │  FINAL_COVERAGE_REPORT.txt │
                            │                            │
                            │  - Overall summary         │
                            │  - Per-function breakdown  │
                            │  - Coverage distribution   │
                            │  - Recommendations         │
                            └────────────────────────────┘


RETRY LOGIC DETAIL (Compilation):
═══════════════════════════════════

    ┌─────────────────────┐
    │  Generate Test      │
    └──────┬──────────────┘
           │
           ▼
    ┌──────────────────────┐
    │  Attempt Compile (1) │
    └──────┬───────────────┘
           │
    ┌──────▼──────────────────────────────┐
    │  Compilation Result?                │
    └─┬─────────────────────────────────┬─┘
      │                                 │
      │ SUCCESS                         │ FAILED
      │                                 │
      ▼                                 ▼
    ┌─────────────────┐      ┌──────────────────────────────┐
    │  Proceed to     │      │  Send error to LLM:          │
    │  Coverage       │      │  "Fix these errors: ..."     │
    └─────────────────┘      └──────┬───────────────────────┘
                                    │
                                    ▼
                             ┌──────────────────────┐
                             │  LLM generates fix   │
                             └──────┬───────────────┘
                                    │
                                    ▼
                             ┌──────────────────────┐
                             │  Attempt Compile (2) │
                             └──────┬───────────────┘
                                    │
                    ┌───────────────┴───────────────┐
                    │ FAILED                        │ SUCCESS
                    ▼                               ▼
            ┌──────────────────┐          ┌─────────────────┐
            │  Retry Count < 3?│          │  Proceed to     │
            └──────┬───────────┘          │  Coverage       │
                   │                      └─────────────────┘
         ┌─────────┴─────────┐
         │ YES               │ NO
         ▼                   ▼
    [Retry again]      ┌──────────────┐
                       │  Skip this   │
                       │  function    │
                       └──────────────┘


================================================================================
