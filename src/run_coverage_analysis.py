#!/usr/bin/env python3
"""
Run coverage analysis on pre-generated tests from output/ConsolidatedTests
This script:
1. Verifies tests exist from option 1
2. Compiles source code with coverage flags
3. Runs the generated tests
4. Generates coverage reports using gcov/lcov
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def check_prerequisites():
    """Check if required tools are installed"""
    required = ['g++', 'gcov', 'lcov']
    missing = []
    
    for tool in required:
        try:
            subprocess.run([tool, '--version'], capture_output=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            missing.append(tool)
    
    if missing:
        print(f"❌ Missing required tools: {', '.join(missing)}")
        print(f"Install with: sudo apt-get install {' '.join(missing)}")
        return False
    return True

def check_tests_exist():
    """Verify that tests have been generated by option 1"""
    test_dir = "output/ConsolidatedTests"
    test_metadata = os.path.join(test_dir, "test_metadata.json")
    
    if not os.path.exists(test_dir):
        print("❌ Tests directory not found: output/ConsolidatedTests")
        print("   Please run Option 1 (Generate Unit Tests) first.")
        return False
    
    if not os.path.exists(test_metadata):
        print("❌ Test metadata not found")
        print("   Please run Option 1 (Generate Unit Tests) first.")
        return False
    
    # Check if there are test executables
    bin_dir = os.path.join(test_dir, "bin")
    if not os.path.exists(bin_dir) or not os.listdir(bin_dir):
        print("❌ No test executables found")
        print("   Please run Option 1 (Generate Unit Tests) first.")
        return False
    
    return True

def run_tests_with_coverage():
    """Run the generated tests and collect coverage data"""
    print("🧪 Running tests with coverage...")
    
    test_dir = "output/ConsolidatedTests"
    bin_dir = os.path.join(test_dir, "bin")
    coverage_dir = "output/UnitTestCoverage"
    os.makedirs(coverage_dir, exist_ok=True)
    
    # Find all test executables
    test_executables = []
    for file in os.listdir(bin_dir):
        file_path = os.path.join(bin_dir, file)
        if os.path.isfile(file_path) and os.access(file_path, os.X_OK):
            test_executables.append(file_path)
    
    if not test_executables:
        print("❌ No executable tests found")
        return False
    
    print(f"Found {len(test_executables)} test executables")
    
    # Run each test
    passed = 0
    failed = 0
    for test in test_executables:
        test_name = os.path.basename(test)
        try:
            result = subprocess.run([test], capture_output=True, timeout=10)
            if result.returncode == 0:
                passed += 1
                print(f"  ✅ {test_name}")
            else:
                failed += 1
                print(f"  ❌ {test_name}")
        except subprocess.TimeoutExpired:
            failed += 1
            print(f"  ⏱️  {test_name} (timeout)")
        except Exception as e:
            failed += 1
            print(f"  ❌ {test_name} ({e})")
    
    print(f"\nTest Results: {passed} passed, {failed} failed")
    return True

def generate_coverage_report():
    """Generate coverage report using gcov/lcov"""
    print("\n📊 Generating coverage report...")
    
    coverage_dir = "output/UnitTestCoverage"
    os.makedirs(coverage_dir, exist_ok=True)
    
    # Initialize lcov with error handling for common issues
    try:
        result = subprocess.run([
            'lcov', '--capture',
            '--directory', 'output/ConsolidatedTests',
            '--output-file', os.path.join(coverage_dir, 'coverage.info'),
            '--ignore-errors', 'mismatch',  # Ignore line mismatch errors
            '--ignore-errors', 'source',     # Ignore missing source files
            '--rc', 'geninfo_unexecuted_blocks=1'  # Set unexecuted blocks to zero
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"⚠️  lcov had issues: {result.stderr[:200]}")
            print("Attempting to continue with partial coverage data...")
        
        # Check if coverage.info was created and has content
        coverage_file = os.path.join(coverage_dir, 'coverage.info')
        if not os.path.exists(coverage_file) or os.path.getsize(coverage_file) == 0:
            print(f"❌ No coverage data was collected.")
            print("   Make sure tests were compiled with --coverage flag and executed.")
            return False
        
        # Generate HTML report
        html_dir = os.path.join(coverage_dir, 'lcov_html')
        result = subprocess.run([
            'genhtml',
            coverage_file,
            '--output-directory', html_dir,
            '--ignore-errors', 'source'  # Ignore missing source files in HTML generation
        ], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"⚠️  genhtml had issues: {result.stderr[:200]}")
        
        print(f"✅ Coverage report generated:")
        print(f"   HTML: {html_dir}/index.html")
        print(f"   Data: {coverage_file}")
        
        # Display coverage summary if available
        try:
            summary_result = subprocess.run([
                'lcov', '--summary', coverage_file
            ], capture_output=True, text=True)
            if summary_result.returncode == 0:
                print("\n📈 Coverage Summary:")
                for line in summary_result.stdout.split('\n'):
                    if 'lines' in line or 'functions' in line:
                        print(f"   {line.strip()}")
        except:
            pass
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"⚠️  Coverage report generation had issues: {e}")
        print("This is normal if tests weren't compiled with coverage flags.")
        print("The tests still ran successfully.")
        return False
    except Exception as e:
        print(f"❌ Unexpected error: {e}")
        return False

def main():
    print("╔══════════════════════════════════════════════════════════════════╗")
    print("║         Coverage Analysis (Using Pre-Generated Tests)           ║")
    print("╚══════════════════════════════════════════════════════════════════╝")
    print()
    
    # Check prerequisites
    if not check_prerequisites():
        return 1
    
    # Verify tests exist
    if not check_tests_exist():
        return 1
    
    print("✅ Pre-generated tests found\n")
    
    # Run tests with coverage
    if not run_tests_with_coverage():
        return 1
    
    # Generate coverage report
    generate_coverage_report()
    
    print("\n✅ Coverage analysis complete!")
    return 0

if __name__ == "__main__":
    sys.exit(main())
